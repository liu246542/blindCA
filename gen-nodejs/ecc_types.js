//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var InitParame = module.exports.InitParame = function(args) {
  this.L = null;
  this.N = null;
  if (args) {
    if (args.L !== undefined && args.L !== null) {
      this.L = args.L;
    }
    if (args.N !== undefined && args.N !== null) {
      this.N = args.N;
    }
  }
};
InitParame.prototype = {};
InitParame.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.L = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.N = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InitParame.prototype.write = function(output) {
  output.writeStructBegin('InitParame');
  if (this.L !== null && this.L !== undefined) {
    output.writeFieldBegin('L', Thrift.Type.STRING, 1);
    output.writeString(this.L);
    output.writeFieldEnd();
  }
  if (this.N !== null && this.N !== undefined) {
    output.writeFieldBegin('N', Thrift.Type.I16, 2);
    output.writeI16(this.N);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicParame = module.exports.PublicParame = function(args) {
  this.p = null;
  this.g = null;
  this.h = null;
  this.x = null;
  this.y = null;
  this.z = null;
  this.gamma = null;
  this.xi = null;
  this.sg = null;
  this.sh = null;
  this.sy = null;
  this.sz = null;
  this.sxi = null;
  if (args) {
    if (args.p !== undefined && args.p !== null) {
      this.p = args.p;
    }
    if (args.g !== undefined && args.g !== null) {
      this.g = args.g;
    }
    if (args.h !== undefined && args.h !== null) {
      this.h = args.h;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.z !== undefined && args.z !== null) {
      this.z = args.z;
    }
    if (args.gamma !== undefined && args.gamma !== null) {
      this.gamma = args.gamma;
    }
    if (args.xi !== undefined && args.xi !== null) {
      this.xi = args.xi;
    }
    if (args.sg !== undefined && args.sg !== null) {
      this.sg = args.sg;
    }
    if (args.sh !== undefined && args.sh !== null) {
      this.sh = args.sh;
    }
    if (args.sy !== undefined && args.sy !== null) {
      this.sy = args.sy;
    }
    if (args.sz !== undefined && args.sz !== null) {
      this.sz = args.sz;
    }
    if (args.sxi !== undefined && args.sxi !== null) {
      this.sxi = args.sxi;
    }
  }
};
PublicParame.prototype = {};
PublicParame.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.p = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.g = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.h = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.x = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.y = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.z = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.gamma = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.xi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.sh = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.sy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sz = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sxi = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicParame.prototype.write = function(output) {
  output.writeStructBegin('PublicParame');
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.STRING, 1);
    output.writeString(this.p);
    output.writeFieldEnd();
  }
  if (this.g !== null && this.g !== undefined) {
    output.writeFieldBegin('g', Thrift.Type.STRING, 2);
    output.writeString(this.g);
    output.writeFieldEnd();
  }
  if (this.h !== null && this.h !== undefined) {
    output.writeFieldBegin('h', Thrift.Type.STRING, 3);
    output.writeString(this.h);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.STRING, 4);
    output.writeString(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.STRING, 5);
    output.writeString(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.STRING, 6);
    output.writeString(this.z);
    output.writeFieldEnd();
  }
  if (this.gamma !== null && this.gamma !== undefined) {
    output.writeFieldBegin('gamma', Thrift.Type.STRING, 7);
    output.writeString(this.gamma);
    output.writeFieldEnd();
  }
  if (this.xi !== null && this.xi !== undefined) {
    output.writeFieldBegin('xi', Thrift.Type.STRING, 8);
    output.writeString(this.xi);
    output.writeFieldEnd();
  }
  if (this.sg !== null && this.sg !== undefined) {
    output.writeFieldBegin('sg', Thrift.Type.STRING, 9);
    output.writeString(this.sg);
    output.writeFieldEnd();
  }
  if (this.sh !== null && this.sh !== undefined) {
    output.writeFieldBegin('sh', Thrift.Type.STRING, 10);
    output.writeString(this.sh);
    output.writeFieldEnd();
  }
  if (this.sy !== null && this.sy !== undefined) {
    output.writeFieldBegin('sy', Thrift.Type.STRING, 11);
    output.writeString(this.sy);
    output.writeFieldEnd();
  }
  if (this.sz !== null && this.sz !== undefined) {
    output.writeFieldBegin('sz', Thrift.Type.STRING, 12);
    output.writeString(this.sz);
    output.writeFieldEnd();
  }
  if (this.sxi !== null && this.sxi !== undefined) {
    output.writeFieldBegin('sxi', Thrift.Type.STRING, 13);
    output.writeString(this.sxi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

